// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'weather/metar.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 8177456225739164128),
    name: 'Metar',
    lastPropertyId: const obx_int.IdUid(45, 1675632124511229468),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7305883371748001709),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8984040929092151888),
        name: 'raw',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5761446689859946500),
        name: 'stationId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8530852919892651769),
        name: 'observationTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2882411042403684242),
        name: 'latitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3572569979433624685),
        name: 'longitude',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6773767688999235773),
        name: 'tempCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 756172577105611198),
        name: 'dewpointCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1307618678633574952),
        name: 'windDirection',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5806478486106691725),
        name: 'windSpeedKt',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8555175500733471287),
        name: 'windGustKt',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2051063052745219487),
        name: 'visibilityStatMi',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6131099538080851880),
        name: 'altimeterHg',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2448302057042225427),
        name: 'seaLevelPressureMb',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 301085102155271924),
        name: 'corrected',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1557201025874169369),
        name: 'auto',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 2055533235989467238),
        name: 'autoStation',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 739521798832036305),
        name: 'maintenanceIndicatorOn',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 4567345943904104546),
        name: 'noSignal',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 8558454432493891420),
        name: 'lightningSensorOff',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 642569242025329235),
        name: 'freezingRainSensorOff',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 437434581549898305),
        name: 'presentWeatherSensorOff',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 7001150078112349239),
        name: 'wxString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 6725309907234502559),
        name: 'skyCover',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 4033011736427309753),
        name: 'cloudBaseFeetAgl',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 3145778485903999226),
        name: 'skyCover2',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 1338187189613421026),
        name: 'cloudBaseFeetAgl2',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 6595536923105537697),
        name: 'skyCover3',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 6067969049266246646),
        name: 'cloudBaseFeetAgl3',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 377324423920056900),
        name: 'skyCover4',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 9108775010950393889),
        name: 'cloudBaseFeetAgl4',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 7512846849272789775),
        name: 'flightCategory',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 472947439052131193),
        name: 'threeHourPressureTendencyMb',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 3920837317780657453),
        name: 'maxTempCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 3627322254921463852),
        name: 'minTempCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 1283946704392006727),
        name: 'maxTemp24HourCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 8774036631666135682),
        name: 'minTemp24HourCelcius',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 3205991565352133995),
        name: 'precipitationInches',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(39, 2652395331870688248),
        name: 'precipitation3HourInches',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(40, 4255370092568873515),
        name: 'precipitation6HourInches',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(41, 7950759977994221598),
        name: 'precipitation24HourInches',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(42, 5285532634815021793),
        name: 'snowInches',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(43, 8194093835355832681),
        name: 'verticalVisibilityFeet',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(44, 5519020665758624214),
        name: 'metarType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(45, 1675632124511229468),
        name: 'elevationInMeters',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) {
  return obx.Store(
    getObjectBoxModel(),
    directory: directory,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(1, 8177456225739164128),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Metar: obx_int.EntityDefinition<Metar>(
      model: _entities[0],
      toOneRelations: (Metar object) => [],
      toManyRelations: (Metar object) => {},
      getId: (Metar object) => object.id,
      setId: (Metar object, int id) {
        object.id = id;
      },
      objectToFB: (Metar object, fb.Builder fbb) {
        final rawOffset = object.raw == null
            ? null
            : fbb.writeString(object.raw!);
        final stationIdOffset = object.stationId == null
            ? null
            : fbb.writeString(object.stationId!);
        final wxStringOffset = object.wxString == null
            ? null
            : fbb.writeString(object.wxString!);
        final skyCoverOffset = object.skyCover == null
            ? null
            : fbb.writeString(object.skyCover!);
        final skyCover2Offset = object.skyCover2 == null
            ? null
            : fbb.writeString(object.skyCover2!);
        final skyCover3Offset = object.skyCover3 == null
            ? null
            : fbb.writeString(object.skyCover3!);
        final skyCover4Offset = object.skyCover4 == null
            ? null
            : fbb.writeString(object.skyCover4!);
        final flightCategoryOffset = object.flightCategory == null
            ? null
            : fbb.writeString(object.flightCategory!);
        final metarTypeOffset = object.metarType == null
            ? null
            : fbb.writeString(object.metarType!);
        fbb.startTable(46);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, rawOffset);
        fbb.addOffset(2, stationIdOffset);
        fbb.addInt64(3, object.observationTime?.millisecondsSinceEpoch);
        fbb.addFloat64(4, object.latitude);
        fbb.addFloat64(5, object.longitude);
        fbb.addFloat64(6, object.tempCelcius);
        fbb.addFloat64(7, object.dewpointCelcius);
        fbb.addInt64(8, object.windDirection);
        fbb.addInt64(9, object.windSpeedKt);
        fbb.addInt64(10, object.windGustKt);
        fbb.addFloat64(11, object.visibilityStatMi);
        fbb.addFloat64(12, object.altimeterHg);
        fbb.addFloat64(13, object.seaLevelPressureMb);
        fbb.addBool(14, object.corrected);
        fbb.addBool(15, object.auto);
        fbb.addBool(16, object.autoStation);
        fbb.addBool(17, object.maintenanceIndicatorOn);
        fbb.addBool(18, object.noSignal);
        fbb.addBool(19, object.lightningSensorOff);
        fbb.addBool(20, object.freezingRainSensorOff);
        fbb.addBool(21, object.presentWeatherSensorOff);
        fbb.addOffset(22, wxStringOffset);
        fbb.addOffset(23, skyCoverOffset);
        fbb.addInt64(24, object.cloudBaseFeetAgl);
        fbb.addOffset(25, skyCover2Offset);
        fbb.addInt64(26, object.cloudBaseFeetAgl2);
        fbb.addOffset(27, skyCover3Offset);
        fbb.addInt64(28, object.cloudBaseFeetAgl3);
        fbb.addOffset(29, skyCover4Offset);
        fbb.addInt64(30, object.cloudBaseFeetAgl4);
        fbb.addOffset(31, flightCategoryOffset);
        fbb.addFloat64(32, object.threeHourPressureTendencyMb);
        fbb.addFloat64(33, object.maxTempCelcius);
        fbb.addFloat64(34, object.minTempCelcius);
        fbb.addFloat64(35, object.maxTemp24HourCelcius);
        fbb.addFloat64(36, object.minTemp24HourCelcius);
        fbb.addFloat64(37, object.precipitationInches);
        fbb.addFloat64(38, object.precipitation3HourInches);
        fbb.addFloat64(39, object.precipitation6HourInches);
        fbb.addFloat64(40, object.precipitation24HourInches);
        fbb.addFloat64(41, object.snowInches);
        fbb.addInt64(42, object.verticalVisibilityFeet);
        fbb.addOffset(43, metarTypeOffset);
        fbb.addInt64(44, object.elevationInMeters);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final observationTimeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final object = Metar()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..raw = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 6)
          ..stationId = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 8)
          ..observationTime = observationTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(observationTimeValue)
          ..latitude = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            12,
          )
          ..longitude = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            14,
          )
          ..tempCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            16,
          )
          ..dewpointCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            18,
          )
          ..windDirection = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            20,
          )
          ..windSpeedKt = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            22,
          )
          ..windGustKt = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            24,
          )
          ..visibilityStatMi = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            26,
          )
          ..altimeterHg = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            28,
          )
          ..seaLevelPressureMb = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            30,
          )
          ..corrected = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            32,
          )
          ..auto = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            34,
          )
          ..autoStation = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            36,
          )
          ..maintenanceIndicatorOn = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            38,
          )
          ..noSignal = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            40,
          )
          ..lightningSensorOff = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            42,
          )
          ..freezingRainSensorOff = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            44,
          )
          ..presentWeatherSensorOff = const fb.BoolReader().vTableGetNullable(
            buffer,
            rootOffset,
            46,
          )
          ..wxString = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 48)
          ..skyCover = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 50)
          ..cloudBaseFeetAgl = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            52,
          )
          ..skyCover2 = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 54)
          ..cloudBaseFeetAgl2 = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            56,
          )
          ..skyCover3 = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 58)
          ..cloudBaseFeetAgl3 = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            60,
          )
          ..skyCover4 = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 62)
          ..cloudBaseFeetAgl4 = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            64,
          )
          ..flightCategory = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 66)
          ..threeHourPressureTendencyMb = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 68)
          ..maxTempCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            70,
          )
          ..minTempCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            72,
          )
          ..maxTemp24HourCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            74,
          )
          ..minTemp24HourCelcius = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            76,
          )
          ..precipitationInches = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            78,
          )
          ..precipitation3HourInches = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 80)
          ..precipitation6HourInches = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 82)
          ..precipitation24HourInches = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 84)
          ..snowInches = const fb.Float64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            86,
          )
          ..verticalVisibilityFeet = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            88,
          )
          ..metarType = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 90)
          ..elevationInMeters = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            92,
          );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Metar] entity fields to define ObjectBox queries.
class Metar_ {
  /// See [Metar.id].
  static final id = obx.QueryIntegerProperty<Metar>(_entities[0].properties[0]);

  /// See [Metar.raw].
  static final raw = obx.QueryStringProperty<Metar>(_entities[0].properties[1]);

  /// See [Metar.stationId].
  static final stationId = obx.QueryStringProperty<Metar>(
    _entities[0].properties[2],
  );

  /// See [Metar.observationTime].
  static final observationTime = obx.QueryDateProperty<Metar>(
    _entities[0].properties[3],
  );

  /// See [Metar.latitude].
  static final latitude = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[4],
  );

  /// See [Metar.longitude].
  static final longitude = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[5],
  );

  /// See [Metar.tempCelcius].
  static final tempCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[6],
  );

  /// See [Metar.dewpointCelcius].
  static final dewpointCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[7],
  );

  /// See [Metar.windDirection].
  static final windDirection = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[8],
  );

  /// See [Metar.windSpeedKt].
  static final windSpeedKt = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[9],
  );

  /// See [Metar.windGustKt].
  static final windGustKt = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[10],
  );

  /// See [Metar.visibilityStatMi].
  static final visibilityStatMi = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[11],
  );

  /// See [Metar.altimeterHg].
  static final altimeterHg = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[12],
  );

  /// See [Metar.seaLevelPressureMb].
  static final seaLevelPressureMb = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[13],
  );

  /// See [Metar.corrected].
  static final corrected = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[14],
  );

  /// See [Metar.auto].
  static final auto = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[15],
  );

  /// See [Metar.autoStation].
  static final autoStation = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[16],
  );

  /// See [Metar.maintenanceIndicatorOn].
  static final maintenanceIndicatorOn = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[17],
  );

  /// See [Metar.noSignal].
  static final noSignal = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[18],
  );

  /// See [Metar.lightningSensorOff].
  static final lightningSensorOff = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[19],
  );

  /// See [Metar.freezingRainSensorOff].
  static final freezingRainSensorOff = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[20],
  );

  /// See [Metar.presentWeatherSensorOff].
  static final presentWeatherSensorOff = obx.QueryBooleanProperty<Metar>(
    _entities[0].properties[21],
  );

  /// See [Metar.wxString].
  static final wxString = obx.QueryStringProperty<Metar>(
    _entities[0].properties[22],
  );

  /// See [Metar.skyCover].
  static final skyCover = obx.QueryStringProperty<Metar>(
    _entities[0].properties[23],
  );

  /// See [Metar.cloudBaseFeetAgl].
  static final cloudBaseFeetAgl = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[24],
  );

  /// See [Metar.skyCover2].
  static final skyCover2 = obx.QueryStringProperty<Metar>(
    _entities[0].properties[25],
  );

  /// See [Metar.cloudBaseFeetAgl2].
  static final cloudBaseFeetAgl2 = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[26],
  );

  /// See [Metar.skyCover3].
  static final skyCover3 = obx.QueryStringProperty<Metar>(
    _entities[0].properties[27],
  );

  /// See [Metar.cloudBaseFeetAgl3].
  static final cloudBaseFeetAgl3 = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[28],
  );

  /// See [Metar.skyCover4].
  static final skyCover4 = obx.QueryStringProperty<Metar>(
    _entities[0].properties[29],
  );

  /// See [Metar.cloudBaseFeetAgl4].
  static final cloudBaseFeetAgl4 = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[30],
  );

  /// See [Metar.flightCategory].
  static final flightCategory = obx.QueryStringProperty<Metar>(
    _entities[0].properties[31],
  );

  /// See [Metar.threeHourPressureTendencyMb].
  static final threeHourPressureTendencyMb = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[32],
  );

  /// See [Metar.maxTempCelcius].
  static final maxTempCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[33],
  );

  /// See [Metar.minTempCelcius].
  static final minTempCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[34],
  );

  /// See [Metar.maxTemp24HourCelcius].
  static final maxTemp24HourCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[35],
  );

  /// See [Metar.minTemp24HourCelcius].
  static final minTemp24HourCelcius = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[36],
  );

  /// See [Metar.precipitationInches].
  static final precipitationInches = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[37],
  );

  /// See [Metar.precipitation3HourInches].
  static final precipitation3HourInches = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[38],
  );

  /// See [Metar.precipitation6HourInches].
  static final precipitation6HourInches = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[39],
  );

  /// See [Metar.precipitation24HourInches].
  static final precipitation24HourInches = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[40],
  );

  /// See [Metar.snowInches].
  static final snowInches = obx.QueryDoubleProperty<Metar>(
    _entities[0].properties[41],
  );

  /// See [Metar.verticalVisibilityFeet].
  static final verticalVisibilityFeet = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[42],
  );

  /// See [Metar.metarType].
  static final metarType = obx.QueryStringProperty<Metar>(
    _entities[0].properties[43],
  );

  /// See [Metar.elevationInMeters].
  static final elevationInMeters = obx.QueryIntegerProperty<Metar>(
    _entities[0].properties[44],
  );
}
